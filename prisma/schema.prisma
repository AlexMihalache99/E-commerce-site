// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  orders    Order[]
  createdAt DateTime   @default(now())
  CartItem  CartItem[]
  Review    Review[]
}

model Product {
  id          String      @id @default(uuid())
  name        String
  description String
  price       Decimal
  imageUrl    String
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  createdAt   DateTime    @default(now())
  reviews     Review[]
  CartItem    CartItem[]
  OrderItem   OrderItem[]
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  products Product[]
}

model CartItem {
  id        String  @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  user      User    @relation(fields: [userId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Order {
  id          String      @id @default(uuid())
  userId      String
  totalAmount Decimal
  status      String      @default("pending") // pending, paid, shipped
  createdAt   DateTime    @default(now())
  user        User        @relation(fields: [userId], references: [id])
  items       OrderItem[]
  payment     Payment?
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Decimal
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model Payment {
  id        String   @id @default(uuid())
  orderId   String   @unique
  method    String
  status    String // pending, completed
  createdAt DateTime @default(now())
  order     Order    @relation(fields: [orderId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  userId    String
  productId String
  rating    Int      @default(5) // 1-5 stars
  comment   String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
  product   Product  @relation(fields: [productId], references: [id])
}